generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model delivery_personnel {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String   @db.Uuid
  vehicle_type        String   @db.VarChar(255)
  license_number      String   @db.VarChar(255)
  availability_status String   @db.VarChar(255)
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  user                user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu_item {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String       @db.VarChar(255)
  description   String?      @db.VarChar(255)
  price         Int
  restaurant_id String       @db.Uuid
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
  restaurant    restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_item    order_item[]
}

model order {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_date       DateTime     @default(now()) @db.Timestamp(6)
  delivery_date    DateTime?    @db.Timestamp(6)
  status           String       @db.VarChar(255)
  total_price      Int
  customer_id      String       @db.Uuid
  restaurant_id    String       @db.Uuid
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  updated_at       DateTime     @default(now()) @db.Timestamp(6)
  coupen           String?      @db.VarChar(255)
  delivery_charges String?      @db.VarChar(255)
  user             user         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant       restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_item       order_item[]
}

model order_item {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity     Int
  price        Int
  order_id     String    @db.Uuid
  menu_item_id String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  menu_item    menu_item @relation(fields: [menu_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order        order     @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurant {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?     @db.VarChar(255)
  address     String?     @db.VarChar(255)
  city        String?     @db.VarChar(255)
  state       String?     @db.VarChar(255)
  zip_code    String?     @db.VarChar(10)
  name        String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  user_id     String      @db.Uuid
  tenant_id   String      @db.VarChar(255)
  menu_item   menu_item[]
  order       order[]
  user        user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String               @unique @db.VarChar(255)
  firstName          String?              @db.VarChar(255)
  lastName           String?              @db.VarChar(255)
  roq_user_id        String               @db.VarChar(255)
  tenant_id          String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  delivery_personnel delivery_personnel[]
  order              order[]
  restaurant         restaurant[]
}
